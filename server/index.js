const express = require("express");
const cors = require('cors');
const { PrismaClient } = require('@prisma/client');
const bcrypt= require('bcryptjs');

const app = express();
const prisma = new PrismaClient();
const PORT = 3001;

app.use(cors());
app.use(express.json());



app.post("/register", async (req, res) => {
  const { name, email, password } = req.body;

  if (!email || !password || !name) {
    return res.status(400).json({ message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  const existingUser = await prisma.user.findUnique({ where: { email } });

  if (existingUser) {
    return res.status(409).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
  }

  const hashedPassword = await bcrypt.hash(password, 10);

  const newUser = await prisma.user.create({
    data: {
      name,
      email,
      password: hashedPassword,
      role: "USER",
    },
  });

  res.json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω", user: { id: newUser.id, name: newUser.name } });
});

app.post("/login", async (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) {
    return res.status(400).json({ message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  const user = await prisma.user.findUnique({ where: { email } });

  if (!user) {
    return res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
  }

  const isValid = await bcrypt.compare(password, user.password);

  if (!isValid) {
    return res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" });
  }

  // –£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  res.json({ message: "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥", user: { id: user.id, name: user.name, email: user.email, role: user.role } });
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});

app.post('/applications', async (req, res) => {
  const { name, phone, email, message, userId,source } = req.body;

  if (!userId) {
    return res.status(401).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
  }

  if (!name || !phone || !email || !message) {
    return res.status(400).json({ message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
  }

  try {
    const newApplication = await prisma.application.create({
      data: {
        name,
        phone,
        email,
        message,
        userId,
        source,
      },
    });

    res.json({ message: '–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', application: newApplication });
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get("/applications", async (_req, res) => {
  try {
    const applications = await prisma.application.findMany({
      include: { user: true },
      orderBy: { createdAt: "desc" },
    });
    res.json(applications);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫" });
  }
});
app.get('/applications/:id', async (req, res) => {
  const { id } = req.params;
  try {
    const application = await prisma.application.findUnique({
      where: { id: Number(id) }
    });
    if (!application) return res.status(404).json({ message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    res.json(application);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});
app.put('/applications/:id', async (req, res) => {
  const { id } = req.params;
  const { status, message } = req.body;
  try {
    const updatedApp = await prisma.application.update({
      where: { id: Number(id) },
      data: { status, message },
    });
    res.json(updatedApp);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏' });
  }
});
app.delete('/applications/:id', async (req, res) => {
  const { id } = req.params;
  try {
    await prisma.application.delete({ where: { id: Number(id) } });
    res.json({ message: '–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏' });
  }
});
app.put("/applications/:id/status", async (req, res) => {
  const { id } = req.params;
  const { status } = req.body;
  if (!['NEW', 'IN_PROGRESS', 'DONE'].includes(status)) {
    return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å' });
  }
  try {
    const updated = await prisma.application.update({
      where: { id: Number(id) },
      data: { status },
    });
    res.json(updated);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" });
  }
});

// üìÑ –£—Å–ª—É–≥–∏ (ServiceTab)

// üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç (ManageContent)
app.get("/content", async (_req, res) => {
  const content = await prisma.content.findFirst();
  console.log("Content from DB:", content);
  if (!content) return res.status(404).json({ message: "Content not found" });
  res.json(content);
});

app.put("/content/:id", async (req, res) => {
  const { id } = req.params;
  const data = req.body;
  try {
    const updated = await prisma.content.update({
      where: { id: Number(id) },
      data,
    });
    res.json(updated);
  } catch (error) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞" });
  }
});

// üìÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (SettingsTab)
app.get("/settings", async (_req, res) => {
  const settings = await prisma.settings.findFirst();
  res.json(settings);
});

app.put("/settings/:id", async (req, res) => {
  const { id } = req.params;
  const data = req.body;
  const updated = await prisma.settings.update({ where: { id: Number(id) }, data });
  res.json(updated);
});
app.get("/dashboard/stats", async (_req, res) => {
  try {
    const totalApplications = await prisma.application.count();
    const newApplications = await prisma.application.count({ where: { status: "NEW" } });
    const inProgressApplications = await prisma.application.count({ where: { status: "IN_PROGRESS" } });
    const doneApplications = await prisma.application.count({ where: { status: "DONE" } });

    const totalUsers = await prisma.user.count();
    const totalServices = await prisma.service.count({ where: { active: true } });

    const recentApplications = await prisma.application.findMany({
            take: 5,
            orderBy: { createdAt: "desc" },
            select: {
            id: true,
            name: true,
            email: true,
            createdAt: true,
            status: true
        }
    } );

    res.json({
      totalApplications,
      newApplications,
      inProgressApplications,
      doneApplications,
      totalUsers,
      totalServices,
      recentApplications
    });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.get("/users", async (req, res) => {
  try {
    const users = await prisma.user.findMany();
    res.json(users);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" });
  }
});

app.delete("/users/:id", async (req, res) => {
  const id = parseInt(req.params.id);
  if (isNaN(id)) {
    return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
  }

  try {
    await prisma.user.delete({ where: { id } });
    res.json({ success: true });
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id=${id}:`, err);
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî Prisma –≤—ã–±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É, –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—ë —Ç–∏–ø –∏ –≤–µ—Ä–Ω—É—Ç—å 404, –∏–Ω–∞—á–µ 500
    res.status(500).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏" });
  }
});

app.put("/users/:id", async (req, res) => {
  const id = parseInt(req.params.id);
  const { name, role } = req.body;

  if (isNaN(id)) {
    return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
  }

  if (!name || !role) {
    return res.status(400).json({ error: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–º—è –∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
  }

  try {
    const updatedUser = await prisma.user.update({
      where: { id },
      data: { name, role },
    });
    res.json(updatedUser);
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id=${id}:`, err);
    res.status(500).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏" });
  }
});

